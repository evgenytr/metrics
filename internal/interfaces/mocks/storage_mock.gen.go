// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/evgenytr/metrics.git/internal/interfaces (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	metric "github.com/evgenytr/metrics.git/internal/metric"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetCounterValue mocks base method.
func (m *MockStorage) GetCounterValue(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterValue", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterValue indicates an expected call of GetCounterValue.
func (mr *MockStorageMockRecorder) GetCounterValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterValue", reflect.TypeOf((*MockStorage)(nil).GetCounterValue), arg0, arg1)
}

// GetGaugeValue mocks base method.
func (m *MockStorage) GetGaugeValue(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeValue", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeValue indicates an expected call of GetGaugeValue.
func (mr *MockStorageMockRecorder) GetGaugeValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeValue", reflect.TypeOf((*MockStorage)(nil).GetGaugeValue), arg0, arg1)
}

// GetMetricsMap mocks base method.
func (m *MockStorage) GetMetricsMap(arg0 context.Context) (map[string]*metric.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsMap", arg0)
	ret0, _ := ret[0].(map[string]*metric.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsMap indicates an expected call of GetMetricsMap.
func (mr *MockStorageMockRecorder) GetMetricsMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsMap", reflect.TypeOf((*MockStorage)(nil).GetMetricsMap), arg0)
}

// InitializeMetrics mocks base method.
func (m *MockStorage) InitializeMetrics(arg0 context.Context, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeMetrics indicates an expected call of InitializeMetrics.
func (mr *MockStorageMockRecorder) InitializeMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeMetrics", reflect.TypeOf((*MockStorage)(nil).InitializeMetrics), arg0, arg1)
}

// ListAll mocks base method.
func (m *MockStorage) ListAll(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockStorageMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockStorage)(nil).ListAll), arg0)
}

// Ping mocks base method.
func (m *MockStorage) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), arg0)
}

// ReadValue mocks base method.
func (m *MockStorage) ReadValue(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadValue indicates an expected call of ReadValue.
func (mr *MockStorageMockRecorder) ReadValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadValue", reflect.TypeOf((*MockStorage)(nil).ReadValue), arg0, arg1, arg2)
}

// StoreMetrics mocks base method.
func (m *MockStorage) StoreMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetrics indicates an expected call of StoreMetrics.
func (mr *MockStorageMockRecorder) StoreMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockStorage)(nil).StoreMetrics), arg0)
}

// Update mocks base method.
func (m *MockStorage) Update(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), arg0, arg1, arg2, arg3)
}

// UpdateCounter mocks base method.
func (m *MockStorage) UpdateCounter(arg0 context.Context, arg1 string, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockStorageMockRecorder) UpdateCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockStorage)(nil).UpdateCounter), arg0, arg1, arg2)
}

// UpdateGauge mocks base method.
func (m *MockStorage) UpdateGauge(arg0 context.Context, arg1 string, arg2 float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockStorageMockRecorder) UpdateGauge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockStorage)(nil).UpdateGauge), arg0, arg1, arg2)
}
